// Generated by CoffeeScript 1.10.0
(function() {
  var OhlcUtil, _, moment, util;

  _ = require('lodash');

  util = require('util');

  moment = require('moment');

  OhlcUtil = (function() {
    var mapForMonthOrWeeks, previousAndCurrentRatio;

    mapForMonthOrWeeks = function(values) {
      return [
        values[0][0], values[0][1], _.maxBy(values, function(v) {
          return v[2];
        })[2], _.minBy(values, function(v) {
          return v[3];
        })[3], _.last(values)[4], _.sumBy(values, "5")
      ];
    };

    function OhlcUtil(arrays, opts) {
      var length, ma, vma, vpma;
      this.arrays = arrays;
      length = (opts != null ? opts.length : void 0) || null;
      if ((opts != null ? opts.type : void 0) != null) {
        switch (opts.type) {
          case 'month':
          case 'Month':
          case 'm':
          case 'M':
            this.arrays = _.chain(this.arrays).groupBy(function(o) {
              var m, y;
              y = moment(o[0]).year();
              m = moment(o[0]).month();
              return "" + y + m;
            }).map(function(values) {
              return mapForMonthOrWeeks(values);
            }).each(function(values) {
              return values[0] = values[0].replace(/-\d{2}$/, '');
            }).sortBy(function(o) {
              return moment(o[0]).unix();
            }).value();
            break;
          case 'week':
          case 'Week':
          case 'w':
          case 'W':
            this.arrays = _.chain(this.arrays).groupBy(function(o) {
              var w, y;
              y = moment(o[0]).year();
              w = moment(o[0]).week();
              return "" + y + w;
            }).map(function(values) {
              return mapForMonthOrWeeks(values);
            }).sortBy(function(o) {
              return moment(o[0]).unix();
            }).value();
        }
      }
      if (length) {
        this.arrays = _.slice(this.arrays, this.arrays.length - length, this.arrays.length);
      }
      this.objects = _.map(this.arrays, function(o) {
        return {
          Date: o[0],
          Open: o[1],
          High: o[2],
          Low: o[3],
          Close: o[4],
          Volume: o[5]
        };
      });
      if (ma = (opts != null ? opts.ma : void 0) || []) {
        _.each(ma, (function(_this) {
          return function(dayCount) {
            return _this.addMa(dayCount);
          };
        })(this));
      }
      if (vma = (opts != null ? opts.vma : void 0) || []) {
        _.each(vma, (function(_this) {
          return function(dayCount) {
            return _this.addVolumeMa(dayCount);
          };
        })(this));
      }
      if (vpma = (opts != null ? opts.vpma : void 0) || []) {
        _.each(vpma, (function(_this) {
          return function(dayCount) {
            return _this.addVPMA(dayCount);
          };
        })(this));
      }
    }

    OhlcUtil.prototype.sliceArray = function(dayCount) {
      var arr;
      if (dayCount) {
        arr = _.slice(this.objects, this.objects.length - dayCount);
      } else {
        arr = this.objects;
      }
      return arr;
    };

    previousAndCurrentRatio = function(be, af) {
      return _.floor((af - be) / Math.abs(be) * 100, 2);
    };

    OhlcUtil.prototype.addMa = function(dayCount) {
      _.each(this.objects, (function(_this) {
        return function(o, i) {
          var name, sum;
          name = "ma" + dayCount;
          if (i > dayCount) {
            sum = _.sumBy(_this.objects.slice(i - dayCount + 1, +i + 1 || 9e9), function(obj) {
              return obj.Close;
            });
            return o[name] = _.round(sum / dayCount, 2);
          } else {
            return o[name] = null;
          }
        };
      })(this));
    };

    OhlcUtil.prototype.addVolumeMa = function(dayCount) {
      _.each(this.objects, (function(_this) {
        return function(o, i) {
          var name, sum;
          name = "vma" + dayCount;
          if (i > dayCount) {
            sum = _.sumBy(_this.objects.slice(i - dayCount + 1, +i + 1 || 9e9), function(obj) {
              return obj.Volume;
            });
            return o[name] = _.round(sum / dayCount, 2);
          } else {
            return o[name] = null;
          }
        };
      })(this));
    };

    OhlcUtil.prototype.addVPMA = function(dayCount) {
      _.each(this.objects, (function(_this) {
        return function(o, i) {
          var name, sum, sumVolume;
          name = "vpma" + dayCount;
          sumVolume = 0;
          if (i > dayCount) {
            sum = _.sumBy(_this.objects.slice(i - dayCount + 1, +i + 1 || 9e9), function(obj) {
              var price, volume;
              price = obj.Close;
              volume = obj.Volume;
              sumVolume += volume;
              return price * volume;
            });
            return o[name] = _.round(sum / sumVolume, 2);
          } else {
            return o[name] = null;
          }
        };
      })(this));
    };

    OhlcUtil.prototype.addRange = function() {
      return _.each(this.objects, function(o) {
        return o.range = previousAndCurrentRatio(o.Low, o.High);
      });
    };

    OhlcUtil.prototype.highPrice = function(dayCount) {
      var arr;
      arr = this.sliceArray(dayCount);
      return _.maxBy(arr, function(o) {
        return o.High;
      }).High;
    };

    OhlcUtil.prototype.lowPrice = function(dayCount) {
      var arr;
      arr = this.sliceArray(dayCount);
      return _.minBy(arr, function(o) {
        return o.Low;
      }).Low;
    };

    return OhlcUtil;

  })();

  module.exports = OhlcUtil;

}).call(this);
